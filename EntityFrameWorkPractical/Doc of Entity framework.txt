EF : 
Offical Object Relational Mapper
EF Core is an open source ORM library with Apis that make 
it easy for use to interact with our database while writing code.

Benefits :
Increases productivity while eliminating repeating code and 
allowing you to connect to may data stores while retaining a consistent code.





Entity Framework (EF) is a popular object-relational mapping (ORM) framework for .NET applications developed by Microsoft. 
It simplifies data manipulation by allowing developers to work with data using higher-level abstraction objects 
rather than dealing with the underlying database tables and SQL directly. 
It’s an essential tool for developers working in the Microsoft ecosystem who need to interact with relational databases like SQL Server, SQLite, MySQL, and others.

Key Features of Entity Framework
ORM Support: Entity Framework maps CLR (Common Language Runtime) objects to database tables and automatically handles basic CRUD operations
 (Create, Read, Update, Delete).

LINQ Support: It integrates with Language Integrated Query (LINQ), allowing developers to write queries in C# instead of SQL, 
which can be more secure and maintainable.

Code-First Approach: Developers can generate database schemas from the code itself using the Code-First approach, 
which allows a database to be created based on model classes.

Database-First Approach: In contrast to the Code-First approach, 
Database-First allows developers to generate model classes and relationships based on an existing database schema.

Model-First Approach: This approach involves designing a model in a designer and then generating 
both the database schema and the corresponding code from the model.

Migrations: Entity Framework supports migrations, which are a way to update the database schema over time as the application evolves without losing existing data.

Caching: EF includes built-in support for caching which helps improve performance by storing some parts of the data in memory.

Configurations: Developers can configure the framework to suit their needs, including lazy loading, eager loading, and explicit loading for handling data retrieval.
Versions of Entity Framework

Entity Framework (EF6 and earlier): The original version known as Entity Framework is still widely used. 
It is a mature ORM with a wealth of features but only supports .NET Framework applications.

Entity Framework Core (EF Core): This is a lighter, extensible, and cross-platform version of Entity Framework that supports .NET Core and later versions, including .NET 5/6/7. It is actively developed and often includes new features and performance improvements over its predecessor.
Common Use Cases
Enterprise Applications: EF is commonly used in enterprise applications for managing database interactions more efficiently and writing less SQL code.
Rapid Development: EF can significantly speed up development time in projects where database management is a core component, thanks to its powerful scaffolding capabilities.
Applications Requiring Strongly-Typed Data Access: Since EF integrates directly with the .NET language runtime, it offers strongly-typed data access, which can improve both performance and safety.
Pros and Cons
Pros:

Reduces the amount of boilerplate code for database operations.
Integrates seamlessly with .NET applications.
Supports complex data types and LINQ queries.
Cons:

Can introduce overhead compared to raw SQL, especially in complex queries or large datasets.
May result in suboptimal SQL queries if not used carefully, potentially impacting performance.
Entity Framework is a powerful tool for .NET developers, providing a rich set of features for interacting with relational databases in a managed and developer-friendly way. Whether to use Entity Framework or another tool may depend on specific project requirements and the expertise of the development team.



LINQ, which stands for Language Integrated Query, is a powerful feature of the .NET framework that provides a consistent model for querying various types of data sources. Introduced with .NET Framework 3.5 in 2007, LINQ brings querying capabilities directly into the C# (and VB.NET) languages, abstracting the complexity of data manipulation processes.

Core Features of LINQ
Unified Query Syntax: LINQ allows developers to use a consistent query syntax across different data sources, such as arrays, lists, XML, relational databases, and even remote services.
Extensible: Developers can extend LINQ to query custom data sources. Many third-party libraries take advantage of this to integrate LINQ with non-traditional data stores.
Strongly Typed: Queries are strongly typed, which provides compile-time checking of all queries and offers IntelliSense support in development environments like Visual Studio.
Debugging Support: Since LINQ is integrated into .NET, it benefits from the robust debugging tools available in .NET development environments.
Functional Style: LINQ queries are written using a declarative style of programming similar to SQL, which can make them easier to understand and modify.
Main Components of LINQ
LINQ to Objects: This allows queries over any IEnumerable or IEnumerable<T> collections directly in memory. For example, querying a List or an array in C#.
LINQ to SQL (DLINQ): This translates LINQ queries into SQL and executes them against a SQL Server database, returning results as objects. It's a simple ORM.
LINQ to Entities: This is part of the Entity Framework and provides a more sophisticated ORM solution than LINQ to SQL, with support for a variety of database engines.
LINQ to XML (XLINQ): This provides the ability to query XML documents elegantly and efficiently, treating XML elements and attributes as part of the queryable data model.
Parallel LINQ (PLINQ): An extension of LINQ to Objects that supports parallel execution of queries to leverage multi-core processors for improved performance.
Examples of LINQ Queries
Here’s a basic example of a LINQ query in C# that filters and orders a list of integers:

csharp
Copy code
List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6 };

var evenNumbers = from num in numbers
                  where num % 2 == 0
                  orderby num descending
                  select num;

foreach (var n in evenNumbers)
{
    Console.WriteLine(n);
}
This will output:

Copy code
6
4
2
This example uses query syntax, which is similar to SQL. Alternatively, the same functionality can be achieved using method syntax, which uses extension methods and lambda expressions:

csharp
Copy code
var evenNumbers = numbers.Where(n => n % 2 == 0).OrderByDescending(n => n);
Pros and Cons of LINQ
Pros:

Consistency across different data sources.
Improved readability and maintainability of code.
Compile-time checking of queries.
Integration with .NET, allowing for a seamless development experience.
Cons:

Performance overhead in some cases, especially with complex queries or very large data sets.
Steep learning curve for developers not familiar with functional programming concepts or SQL.
Potential for misuse, leading to inefficient queries if not used carefully.
LINQ is a versatile tool that can dramatically simplify data handling and querying tasks in .NET applications, making it a valuable skill for developers working in the Microsoft technology stack.


In the context of software development, particularly when dealing with databases in an application, the term "Database Context" usually refers to a central class in an Object-Relational Mapping (ORM) framework that manages the database operations for a specific database. This concept is commonly used in ORMs like Entity Framework, where it is known as the "DbContext" class.

What is DbContext in Entity Framework?
DbContext is an essential part of Entity Framework, representing a session with the underlying database using which you can perform CRUD (Create, Read, Update, Delete) operations on your entities. It acts as a bridge between your C# application and the database.

Key Responsibilities of DbContext
Managing Database Connections: DbContext is responsible for managing the connection to your database. It encapsulates the database connection and configuration, which are used to perform all the data operations.
Querying: Provides the capability to query the database using LINQ (Language Integrated Query), which translates your LINQ queries into SQL queries that are then executed against the database.
Change Tracking: Keeps track of changes made to objects since they were fetched or since the last commit. This enables the DbContext to update the database with changes when SaveChanges() is called.
Caching: Implements first-level caching by default. This means that during the lifespan of the DbContext instance, any entity fetched more than once will be retrieved from the cache, not the database.
Transaction Management: Supports transactions, allowing several operations to be combined into a single unit of work that either fully succeeds or fully fails, ensuring data integrity.
Migrations: DbContext can be used to manage migrations, which are a way to update the database schema over time as the application evolves.
Lifecycle of DbContext
The lifecycle of a DbContext includes instantiation, use, and disposal:

Instantiation: A DbContext instance is created. This instance is typically scoped to a request in web applications, meaning a new instance is created for each request.
Usage: During its life, the DbContext is used to perform operations such as querying and saving data. Its change tracking mechanism will monitor any changes made to the objects retrieved using it.
Disposal: After the operations are complete, the DbContext should be disposed of to free up the resources it was using, particularly the database connection. This is typically handled automatically if using dependency injection in frameworks like ASP.NET Core.


Database Context : 
Abstraction of the database structure in code
List the models and their datbase table names.
Instantiates a db connection during application runtime.
allows for on creation customization and custom table configurations.

{
DB Context is a standard class that you'd get with entity framework core that basically says, I'm turning

this regular C-sharp class into an actual database context class that represents the database.

So now data models that are outlined are expected to be mapped back to actual tables.

We also get access to certain methods, so we get access to a method called on configuring.

Now you'll see that it is being overridden in this block of code.

And what happens is that there are default configurations, but then you may want to override it to

add things like your connection string and any resiliency options that you want on the database connection,

stuff like that.

You put that in on configuring, on model creating.

That's where you will outline different configurations for the tables, like different constraints that

you may want on different fields in the tables, in the actual database.

So when it is creating the actual database, it will look at on model creating to know what it should

be doing and what kind of SQL or DDL statements it should be defining to enact all of the constraints

that you have outlined in on model creating.

Then below we have the list of what we call DB sets.

So you'll notice that we would have already created coach and team classes, right?

So coach here is as a DB set of type coach and you'll see DB set of type team and you'll see other ones.

So we're going to be creating other tables obviously.

But the point here is that the DB set now represents the actual table in the database.

So we're saying that I want a table or a DB set modeled off the class called Team and in the database

I want it to be called teams.

And of course it's public.

So we get on set and that's basically it.

So for every new table that you're going to be adding, you just need to put on a property public.

DB Set the data type and its name.

That should map back to the name in the database.

Of course there are overrides and there are different ways to do certain things, but once again, once

you follow the naming conventions, you don't have to do a lot of extra stuff outside of extenuating

circumstances.

So now that we have a clearer picture of what the DB context is all about, lets us jump back into the

code and create our own.
}









------------------------------------------------------
Tracking 
It works best when the same DbContext instance is used to both query for entities and change them.
(
So that when we're writing a query of course we need a DB Context.
We are not limited to only having one Db context, but whenever we write the query and perform the query with
a particular instance of the DB context, unless we specifically state otherwise, then whatever
is returned is being tracked.
And so what this is saying is that when we make our changes and we're going to do what we call save
changes, it's important to reuse that same DB context to be able to efficiently see what has changed
since the query was executed and when the changes are being submitted.
)

Ef Core automatically tracks the state of queried entities and then detects any changes made to these entities when SaveChanges() is called
(
So if Core automatically tracks the state of the queried entities and 
detects any changes made to these
entities, when the save changes or save changes is sync method is called.
)

DetectChanges() is called during the save changes operation to detect what is different in the tracking.
(
Now there's another method called detect changes which is called during the Save Changes operation.
This is a method that we can call manually if we want it to actually see what has changed between the
query and the saving operation.
However, it is a method that actually gets called automatically during the Save Changes operation.
)
Now another thing that we can pay attention to when we're talking about tracking is the state.


Entity State changes based on the operation that has been carried out on an entity
(
So the entity state is relative to the operation that has been carried out on the entity.
So here we have a list of entity states.
)

Detached :
First state is detached.
So if we run a query and say as no tracking, then everything is in a detached state.
It's not being tracked.

Added : 
Whenever we are adding something, meaning we have created a new object that we want to add to the database,
then it is now in a state of added.
So when save changes executes, then it will see okay, I need to insert 

Unchanged :
we have unchanged, which means 
that we did a query, we looked at the data, but we haven't changed anything about the data.
So when we're probably saving changes, it's going to look at what is being tracked.
Nothing has happened to these entities, so they are in an unchanged state.

Modified :
Then we have modified, which means that, well, self explanatory, something has changed.
So I sent you X and I got back Y for this record.
So this has been modified.

Deleted :
We also have deleted.
So when we're removing something from the database, we can change the state to delete it so that when
the save changes is executing, it will see that now it should delete this particular record or these
records.

Now add, attach and update methods, work on entities and related entities, which means that when
we're looking at our relationships section of this course, we're going to be able to see that we can
actually query one record and have all of the related data come back with that record.

Now, when we use Add, attach and update, we're actually going to change the state of not only the
parent record, but also all of the other records that are related.

So it's important to understand these behaviors.

Now with that in mind, we do have the option to change the state of the exact entity that we are changing,
which means that if you have an entity that has related data but you really only updated the particular
entity, then you can always change the state manually so that it doesn't ripple down to all the children.

Once again, we're going to be looking at all of this in detail.

Now, this is a table from Microsoft's documentation that shows the different entity states and the
different actions that will happen when changes are saved.
So it's good to appreciate the different states and what the entity framework core or the DB context
will try to do based on the states that we put the entity in.

Saving Changes :

SaveChanges() is a method that is used to confirm pending changes to database records
(
Now I keep on talking about save changes, so saving changes in core.
Whenever we modify data, we have to save the changes.
So you have save changes and you have saved changes async.

And of course we know that it is better to use the asynchronous version of the methods where applicable,
but either one represents a method that is used to confirm the pending changes being made to the database
records.
)

SaveChanges() is transactional(for most providers)
All entity changes either succeed or fail
No partial changes
(
So one thing about save changes that we need to appreciate is that it is transactional.
So in a database situation, when we talk about a transaction, it means that everything that is being
done will either be successful or it will fail.

This means that there are no partial changes.

So if we have three entities that we made changes to and then we save changes, if one of these entities
fails, then the entire operation is Thrown out.

None of these three entities will be changed.

So that behavior is also very important for us to appreciate and know how to maneuver.
So now that we have an appreciation for tracking changes and saving changes, let us jump into an activity
where we look at how we can add data to the database.


-------------------------------------------------------------------

Database Migration 

  Used to control changes to Database
        Entity or Database Context Changes :

  Applied Using Update commands :

  Can be rolled back

  Tracked in source control

  Database changes are tracked in the 
     _EFMigrationsHistory table

   Can be replayed to create a database at any time 


So by now we know that it is used to control the changes that are being made to the database, and changes

to the database could be changes to the entity or entities or changes to the database context.

So basically anything that we do to either an entity or the database context, which could be adding

new configurations or even adding new entities or data models, any of those changes will be compared

with the snapshot file that we've seen.

And then if once those differences are finalized by EF core, it will generate a migration containing

actions that need to be taken to carry out the changes.


So pretty much these changes are applied to the database using update commands.

Now one of the key features of migrations that makes it so powerful is the fact that they can actually

be rolled back so we know exactly what has changed and we can always undo exactly that change.

And once again, this is very important when we're doing code first database development, and especially

in an agile environment where database changes may need to happen and they need to happen rapidly and

we need to be able to account for them as we go along.

So migrations definitely fills that gap.

Another important thing is that they can be tracked in source control once again, going back to that

whole Agile concept, it is important for us to be able to track rollback to a previous version, see

who made what change and when.

So the ability to have that tracked in source control is very, very, very beneficial to us.

Then we have the fact that database changes are also being tracked in the database itself.

So once we apply a migration to a database or we create a database through migrations or code first

development, we get a table called underscore, underscore, F migrations history.

Now this table shows all of the migrations that have been applied to the database up until that time,

which means that when we roll back, it will always be able to or should always be able to account for

the migrations that are available, plus the history.

And then between those two, it can tell, okay, I'm at this version or I have up until this migration

applied.

So it's a nice way for us to keep track of which migrations are actually applied to the database and

be able to consolidate that in during our development.

And another key benefit to migrations is that they can always be replayed at any time.

So we can have migrations that may be see data, we can have several migrations that create a database,

create the tables, create sample data, make changes along the way.

The point here is that if I need a fresh copy of a database at any point, all I have to do is change

a connection string run update database, and then it will generate a brand new database up to the latest

migration or whichever migration version I requested.

So all of these superpowers combined to give us a seamless development experience.

And if you have been a developer for years working with databases, you know how important it is to

make sure that our database structure is always up to par based on our application needs.

So in this section, once again, we're going to dive into migrations, look at different scenarios,

look at different commands and things that we can do and explore best practices when handling database


------------------------------------------------

EF Bundles

Executable files that can be used to apply migrations 
Address some shortcomings of PMC and CLI Commands
Can be run without needing additional tools or runtime
Can be used as part of a CI/CD deployment 
Better error handling ensures that database changes succeed or fail together


----------------------------------------

Loading Related Data

There are three common EF core patterns used to load related data.
-> Eage loading : related data is loaded from the database as part of the initial query
    use the include() method to load related data in a query
    Eager loading of collection navigation may cause performance issues.
      Use AsSplitQuery() as needed.
    Inclued() allows Where() methods for filtering
        If tracking is enabled, then the filter might return tracked records, which might be incorrect data
    Use ThenInclude() to get more dependencies.

-> Explicit loading : related database is explicitly loaded from the database later.
    Explicitly load a navigation property with the DbContext.Entry(..)Api
    Data can be explicitly loaded by executing a separate query that returns the related entities
    If change tracking is enabled, EF core will set the navigation properties od the newly-loaded entity to refer to any entities already loaded.

-> Lazy loading : related data is loaded from the database accessing the navigation property.




In Entity Framework (EF), eager loading, explicit loading, and lazy loading are techniques for loading related entities from the database. These techniques help optimize performance and manage relationships between entities effectively. Let's explore each of them:

1. Eager Loading:
Eager loading is a technique where related entities are loaded from the database along with the main entity. It means that when you retrieve an entity, EF automatically loads its related entities as well.

Example:

Suppose you have an Order entity with a navigation property OrderLines representing the order lines associated with it. With eager loading, you can include the OrderLines when querying the Order entity:

csharp
Copy code
var order = context.Orders
    .Include(o => o.OrderLines)
    .FirstOrDefault();
In this example, .Include(o => o.OrderLines) specifies that the OrderLines associated with each Order should be loaded eagerly.

2. Explicit Loading:
Explicit loading is a technique where related entities are loaded from the database explicitly when needed. It allows you to control when related entities are loaded, which can be useful in scenarios where you want to minimize the amount of data loaded upfront.

Example:

Using the same Order entity example, you can explicitly load the OrderLines associated with an Order after retrieving the Order entity:

csharp
Copy code
var order = context.Orders.FirstOrDefault();

if (order != null)
{
    // Explicitly load OrderLines
    context.Entry(order)
        .Collection(o => o.OrderLines)
        .Load();
}
In this example, .Load() is used to explicitly load the OrderLines associated with the Order.

3. Lazy Loading:
Lazy loading is a technique where related entities are loaded from the database automatically when accessed for the first time. It defers the loading of related entities until they are actually needed, which can help improve performance by reducing the amount of data loaded upfront.

Example:

To enable lazy loading in EF Core, you need to mark navigation properties as virtual:

csharp
Copy code
public class Order
{
    public int OrderId { get; set; }
    public string OrderNumber { get; set; }
    
    public virtual ICollection<OrderLine> OrderLines { get; set; }
}
With lazy loading enabled, you can access related entities as usual without explicitly loading them:

csharp
Copy code
var order = context.Orders.FirstOrDefault();

// Access OrderLines (they will be loaded automatically)
var orderLines = order.OrderLines;
In this example, order.OrderLines is accessed directly without explicit loading, and EF Core will load the related OrderLines lazily.

Conclusion:
Eager loading, explicit loading, and lazy loading are techniques for loading related entities in Entity Framework, each offering its own advantages and trade-offs. Choosing the appropriate loading strategy depends on factors such as performance requirements, data access patterns, and the size of the dataset.


------------------------------------------------------


In Entity Framework (EF), tracking refers to the mechanism by which EF keeps track of changes made to entities loaded from the database. It enables EF to detect changes made to entity properties and automatically generate the appropriate SQL statements to persist those changes back to the database when SaveChanges() is called.

Tracking Modes:
No Tracking: Entities are loaded from the database without being tracked by EF. Changes made to entities are not automatically detected or persisted back to the database.

Tracking: Entities are loaded from the database and automatically tracked by EF. Changes made to entities are detected, and EF generates the appropriate SQL statements to persist those changes back to the database when SaveChanges() is called.

Benefits of Tracking:
Simplifies data modification: EF tracks changes to entities, making it easier to modify entity properties and persist those changes back to the database.
Enables change detection: EF automatically detects changes made to tracked entities, allowing you to update the database with minimal effort.
Supports relationships: Tracking enables EF to manage relationships between entities and ensure referential integrity when persisting changes to related entities.
Fluent API Configuration:
In Entity Framework, you can configure the tracking behavior using the Fluent API. For example, you can specify whether entities should be tracked or not when loading data from the database:

csharp
Copy code
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<EntityType>()
        .ToTable("TableName")
        .AsNoTracking(); // Disable tracking for this entity
}
In this example, .AsNoTracking() is used to disable tracking for the specified entity type.

Considerations:
Performance: Tracking can have performance implications, especially when dealing with large datasets. Disabling tracking (AsNoTracking()) for read-only scenarios can help improve performance.
Concurrency: EF uses tracking to implement optimistic concurrency control, which helps prevent conflicting updates to the same data by multiple users.
Detached Entities: Entities that are not tracked (detached) cannot be automatically updated by EF. You need to manually attach them to the context or use methods like Attach() or Update() to re-attach them before saving changes.
Conclusion:
Tracking is a fundamental concept in Entity Framework that enables automatic change detection and simplifies data modification. By understanding tracking modes and how to configure them using the Fluent API, you can optimize performance and control the behavior of EF when working with entities in your application.


These are configurations for setting the query tracking behavior in Entity Framework Core. Let's look at each one:

1. .UseQueryTrackingBehavior(QueryTrackingBehavior.TrackAll)
This configuration instructs Entity Framework Core to track all entities retrieved by queries. This means that any entities returned by queries will be automatically tracked by the DbContext. Any changes made to these entities will be detected by EF Core, and appropriate SQL statements will be generated when calling SaveChanges() to persist these changes back to the database.

Usage:

csharp
Copy code
var options = new DbContextOptionsBuilder<MyDbContext>()
    .UseQueryTrackingBehavior(QueryTrackingBehavior.TrackAll)
    .Options;
var dbContext = new MyDbContext(options);
2. QueryTrackingBehavior.NoTracking
This configuration tells Entity Framework Core not to track entities retrieved by queries. When entities are retrieved in this mode, they are considered detached from the DbContext, and EF Core does not monitor any changes made to them. This can improve performance, especially in read-only scenarios, as EF Core does not have to manage change tracking overhead.

Usage:

csharp
Copy code
var options = new DbContextOptionsBuilder<MyDbContext>()
    .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking)
    .Options;
var dbContext = new MyDbContext(options);
3. QueryTrackingBehavior.NoTrackingWithIdentityResolution
This configuration combines the behavior of NoTracking with the ability to attempt to match entities retrieved by queries to existing tracked entities by their key values. If a tracked entity with the same key values already exists in the DbContext, EF Core will return the tracked entity instead of creating a new instance. This can be useful for maintaining consistency and reducing memory usage when working with detached entities.

Usage:

csharp
Copy code
var options = new DbContextOptionsBuilder<MyDbContext>()
    .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTrackingWithIdentityResolution)
    .Options;
var dbContext = new MyDbContext(options);
Conclusion:
These configurations allow you to control how Entity Framework Core tracks entities retrieved by queries, providing flexibility to balance performance and memory usage based on the requirements of your application. Choose the appropriate tracking behavior based on factors such as performance considerations, data modification requirements, and memory usage constraints.


------------------------------------------------------------------

DbContext is a class in Entity Framework that represents a session with the database, allowing you to query and save data. It's a core component of the Entity Framework and serves as the main entry point for accessing a database within your application.

Here are some key points about DbContext:

Data Context: DbContext acts as a bridge between your domain classes (entities) and the database. It provides access to a database through a set of DbSet<TEntity> properties, each representing a table or collection of entities in the database.

Entity Management: DbContext tracks changes made to entities during their lifetime within the context. It automatically detects changes and generates the necessary SQL statements to persist those changes back to the database when you call the SaveChanges() method.

Configuration: You can configure various aspects of the DbContext and the underlying database using fluent API configuration or data annotations. This includes specifying entity mappings, relationships, table names, and other database-specific settings.

Lifetime Management: Typically, you create an instance of DbContext per request or per unit of work within your application. It's designed to be short-lived and scoped to a specific operation or transaction. You should dispose of the DbContext when it's no longer needed to release resources and ensure proper cleanup.

Integration: DbContext integrates with various database providers, allowing you to work with different database systems such as SQL Server, MySQL, PostgreSQL, SQLite, etc. You can switch between different database providers without changing your application code significantly.

In summary, DbContext is a fundamental component of Entity Framework that provides a high-level abstraction for interacting with databases, managing entities, and performing CRUD operations within your application. It simplifies data access and enables rapid development of database-driven applications.


EF Core and Asp.Net
Db Context behave differently in web application
web application are disconnected since they are not accessed via the same network most times
Each web request accesses the database on demad(scoped)
No tracking is generally recommended
Entity States must be explicitly updated before saving changes



